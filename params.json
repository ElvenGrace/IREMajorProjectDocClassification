{
  "name": "Wikipedia Document Classification",
  "tagline": "A review on popular Text Classification Methods",
  "body": "### Aim\r\nGiven a Wikipedia Document our aim is to say the Categories it may belong to, based on a Training data in which each Document is tagged to multiple Categories,  The Categories we considered are the following: \r\nWiki\r\nArt\r\nReference\r\nPeople\r\nCulture\r\nBooks\r\nDesign\r\nPolitics\r\nTechnology\r\nPsychology\r\nInteresting\r\nWikipedia\r\nResearch\r\nReligion\r\nMusic\r\nMath\r\nDevelopment\r\nTheory\r\nPhilosophy\r\nArticle\r\nLanguage\r\nScience\r\nProgramming\r\nHistory\r\nSoftware\r\n\r\n\r\n### Dataset\r\nWe used Wiki10+ data set from following link:\r\n---http://nlp.uned.es/social-tagging/wiki10+/\r\nThe data set contains following two files:\r\nwiki10+_tag-data.tar.gz  (3,6 MB): Contains all the tag data for the Wikipedia articles.\r\nwiki10+_documents.tar.bz2  (271 MB): Content for all the Wikipedia articles on the dataset in HTML format. We extracted the text from HTML to run different experiments.\r\nAs we only consider top 25 documents, we removed those documents who don't have even one of these top 25 categories\r\nThis dataset is made up by 20,764 unique URLs, all of them with their corresponding social tags. All of them are English Wikipedia articles with at least 10 annotations on Delicious. Therefore, the tag information for each of these Wikipedia articles as well as the text content can be found in this dataset.\r\n\r\n####Approach 1:  LDA or Latent Dirichlet Allocation\r\nWe can use LDA to classify documents in different tags. We know that LDA divides the given corpus in fixed no. of topics and can also provide which topics are contained in a document and with what probability. For the experiments performed  using LDA, we don’t need to worry about internal implementation of LDA. We used gensim’s implementation of LDA. To use the library, we just need to know few points about input and output format.\r\nDuring Learning phase\r\nINPUT:\r\nWe provide all the wiki documents in single XML file zipped in bz2 format.\r\nLEARNT MODEL:\r\nWord distribution for each topic eg: “topic #0: 0.009*river + 0.008*lake + 0.006*island + 0.005*mountain + \r\n0.004*area + 0.004*park + 0.004*antarctic + 0.004*south + 0.004*mountains + 0.004*dam”\r\nDuring Testing phase\r\nINPUT:\r\nWe provide the document to be classified in bag of words form to the learnt model\r\n\r\nOUTPUT:\r\nTopic distribution for a the text eg: “[(34, 0.023705742561150572), (60, 0.017830310671555303), (62, 0.023999239610385081), (83,0.029439444128473557), (87, 0.028172479800878891), (90, 0.1207424163376625), (116,0.022904510579689157)]”  represents the probabilities of the doc to fall under topics like 34,60,62….\r\n\r\nMajor challenge in classification: \r\nIt seems to be fairly simple to classify a document in different topics as we can see in output of testing phase. But  our aim is to classify the document under different tags like “politics, science” etc. and not under topic numbers. \r\nPossible Solutions\r\nClearly we need some way to map all the topics learnt by LDA to the most suitable tags. If we are able to do this then we simply test the unknown text against the model learnt by LDA and then report the tag corresponding to the topic given by LDA in output. We tried two different solutions to map topics to the tags:\r\nAs each topic of LDA is represented by distribution of words. We can create a query by combining those words and find best matched document on tf-idf basis for that query. That particular document must be the best match for that topic. So we can map the topic to tag of best matched document.\r\nWe can find probability distribution of topics for all the documents. Represent each document as a topic vector. Now find the closest document or the most similar document for each topic. Map the topic to the tag of that particular document.\r\n\r\nApproach 1\r\nWe can specify the major steps of to implement this approach as follows:\r\nDivide the documents in training and test data with 4000 docs in test data.\r\nOn training data run gensim's LDA and save the learnt model. Set the number of topics as 300.\r\nSave all the topics in a file and convert them to queries.\r\n         Example topic:\r\n2016-04-06 00:05:52,466 : INFO : topic #299 (0.003): 0.014*insurance + 0.009*scott + 0.007*samurai + 0.007*hipster + 0.006*forecasting + 0.006*fbi + 0.006*imf + \t0.005*skeptical + 0.005*bass + 0.005*hidden\r\n  \t       Query corresponding to above topic  #299:\r\n  \t 299:insurance scott samurai hipster forecasting fbi imf skeptical bass hidden\r\n        4.\t For each query, retrieve the most relevant document in training set on tf-idf basis and create topic to doc Id mapping.\r\n         Example:\r\n    \t\t     299 : cae3757420fbc4008bbfe492ab0d4cb5\r\n      5.   Create a topic to tag mapping using the docId to tag mapping (already available in tagData.xml) and doc ID to topic mapping created in above step.\r\n         Example docId to tag from tagData.xml:\r\n         cae3757420fbc4008bbfe492ab0d4cb5 : ['wiki', 'en', 'wikipedia,', 'activism', '-‘, 'political', 'poetry', 'free','person', 'music', 'encyclopedia', 'the', 'biography', 'history']\r\n         Example topic to docId:\r\n         299:cae3757420fbc4008bbfe492ab0d4cb5\r\n         Example topic to tag:\r\n         299:['wiki', 'en', 'wikipedia,', 'activism', '-', 'political', 'poetry', 'free', 'person', 'music‘, 'encyclopedia', 'the','biography', 'history']\r\n         Now each topic is mapped to multiple tags.\r\n6.   For each of the test documents (from 4000 docs in test data), find out the relevant topics using learnt LDA model. Combine the tags corresponding to them and match them against already available target tags (from tagData.xml) for that particular document.\r\n         If even one tag is matched, we say that document is correctly classified.\r\nExample:\r\nTopic distribution returned by LDA for a particular doc:\r\n[(34, 0.023705742561150572), (60, 0.017830310671555303), (62, 0.023999239610385081), (83,0.029439444128473557), (87, 0.028172479800878891), (90, 0.1207424163376625), (116,0.022904510579689157), (149, 0.010136256627631658), (155,0.045428499528247894), (162,0.014294122339773195), (192, 0.01315170635603234), (193, 0.055764500858303222), (206,0.015174121956574787), (240, 0.052498569359746373), (243,0.016285345117555323), (247,0.019478047862044864), (255, 0.018193391082926114), (263,0.030209722561452931), (287,0.042405659613804568), (289, 0.055528896333028231),(291,0.030064093091433357)]\r\n\r\nTags combined for above topics (from topic to tag mapping created in above step):\r\n['money', 'brain', 'web', 'thinking', 'interesting', 'environment', 'teaching', 'web2.0', 'bio', 'finance', 'government', 'food', 'howto', 'geek', 'cool', 'articles', 'school', 'cognitive', 'cognition', 'energy', 'computerscience', '2read', 'culture', 'computer', 'video', 'home', 'todo', 'investment', 'depression', 'psychology', 'wikipedia', 'research', 'health', 'internet', 'medicine', 'electronics', 'tech', 'math', 'business', 'marketing', 'free', 'standard', 'interface', 'article', 'definition', 'anarchism', 'of', 'study', 'economics', 'programming', 'american', 'games', 'advertising', 'social', 'software', 'apple', 'coding', 'maths', 'learning', 'management', 'system', 'quiz', 'pc', 'music', 'memory', 'war', 'nutrition', 'comparison', 'india', 'info', 'science', 'dev', '@wikipedia', 'future', 'behavior', 'design', 'history', '@read', 'mind', 'hardware', 'webdev', 'politics', 'technology‘]\r\nTarget tags for this particular doc from tagData.xml:\r\n['reference', 'economics', 'wikipedia', 'politics', 'reading', 'resources']\r\n\r\nAccuracy from this approach: 97% \r\n\r\nProblem with this approach:\r\nIf there is any match between our found tags and true tags, then we call it as correctly classified. Probability of such scenario is very high as we have multiple found tags and multiple true tags. So even if we are doing something wrong, chances of getting good accuracy is very high.\r\nAs we are doing tf-idf based matching then there is high chance that the document we get on top is not best match for that particular topic. It can also happen because we are not considering all the representative words of a particular topic to frame the query, we just considered top 10.\r\n\r\n\r\n\r\n\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}